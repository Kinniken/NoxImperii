

      C O N S T A N T S


number player
   @desc players pilot ID


      F U N C T I O N S


   T A S K S

pushtask( number pos, string name, int/pointer target )
   @desc pushes a task onto the queue
   @param pos puts it at the beginning if 0, or end if 1
   @param name is the function name (should be defined in the lua file)
   @param target is an int or pointer containing target info (can be for example
   pilot ID or a Vector2d*)
   @return nil

poptask()
   @desc pops the current task from the list
   @return nil

taskname()
   @desc returns the currnt task's name
   @return string name of the current task


   C O N S U L T

target()
   @desc gets the current target
   @return pointer to the current target

targetid()
   @desc gets the current targets ID
   @return number the current target's ID

rndpilot()
   @desc gets a random target ID
   @return number to a random target ID

dist( Vector2d vect )
   @desc gets the distance from the position of the Vector2d vect
   @param vect point to calculate the distance from
   @return nil

pos( [number pilot] )
   @desc gets the pilot's position or the current pilot's position if no pilot is specified
   @param pilot ID of the pilot to get the position of, if no params are
   called it uses the current pilot as target
   @return Vector2d

minbrakedist()
   @desc returns the minimum required braking distance assuming all goes well
   @return number distance needed to brake

armour( [number pilot] )
   @desc returns the total amount of armour left
   @param pilot optional pilot id, if not the current pilot is used
   @return pilots current amount of armour

shield( [number pilot] )
   @desc returns the total amount of shield left
   @param pilot optional pilot id, if not the current pilot is used
   @return pilots current amount of shield

parmour( [number pilot] )
   @desc returns the percent of armour left
   @param pilot optional pilot id, if not the current pilot is used
   @return percent of armour the pilot has left

pshield( [number pilot] )
   @desc returns the percent of shield left
   @param pilot optional pilot id, if not the current pilot is used
   @return percent of shield the pilot has left

cargofree()
   @desc returns how much free space the pilot has
   @return free space of the current pilot (in tons)


   B O O L E A N

exists( number id )
   @desc checks to see if pilot id is vald
   @param id pilot to check
   @return true if the pilot is valid

ismaxvel()
   @desc checks if velocity is maximum
   @return true if velocity is maximum, false otherwise

isstopped()
   @desc checks if is stopped
   @return true if stopped, false otherwise

isenemy( number p )
   @desc checks if p is an enemy of current pilot 
   @param p ID of a pilot to see if he is an enemy
   @return true if p is an enemy

isally( number p )
   @desc checks if p is an ally of the current pilot
   @param p ID of a pilot to check if he is an ally
   @return true if p is an ally

incombat( [number id] )
   @desc queries whether a pilot is in combat
   @param id pilot to check whether is in combat or not, defaults to self
   @return if pilot is in combat or not



   M O V E M E N T

accel( [number mod] )
   @desc accelerates the pilot
   @param mod float that represents speed to accel to (1. is full speed, 0. is stopped)
   @return nil

turn( number mod )
   @desc turns the pilot
   @param mod float that represents  the turning ratio between -1 (max right) and 1 (max left)
   @return nil

face( number/Vector2d target, [number invert] )
   @desc turns to face target
   @param target pilot ID or Vector2d to face
   @param invert faces away if 1
   @return number offset from target in grad

brake()
   @desc makes the pilot brake
   @return nil

getnearestplanet()
   @desc gets the nearest friendly planet's position
   @return position to the nearest friendly planet

getrndplanet()
   @desc gets the position of a random friendly planet
   @return position to a random friendly planet



   C O M B A T

combat( [number b] )
   @desc makes the pilot be set as either in combat or out of combat (for comm and such)
   @param b if 0 sets the pilot to be in combat, if 1 or omitted sets it to be in combat
   @return nil

settarget( number target )
   @desc sets the target for the pilot, should be called each frame
   @param target pilot to be targetted
   @return nil

secondary()
   @desc attempts to set the best secondary weapon (defaults to launchers)
   @return the type of the secondary weapon set ("None","Weapon","Launcher","Turret")

hasturrets()
   @desc checks to see if the pilot has turrets
   @return true if the pilot has turrets

shoot( [number weapon] )
   @desc makes the pilot shoot weapons
   @param weapon weapons to shoot, 1 if primary, 2 if secondary, 3 if both.  Defaults to 1.
   @return nil

getenemy()
   @desc returns the id of the nearest enemy
   @return Pilot id of the closest enemy or 0 if none is found



   T I M E R S

settimer( number t, number delay )
   @desc sets timer t to wait for delay ms
   @param t timer to set
   @param delay time in ms to wait
   @return nil

timeup( number t )
   @desc returns true if time is up for timer t
   @param t timer to check
   @return boolean true if timer t is up



   M E S S A G I N G

comm( number id, string message )
   @desc makes the pilot say something to the pilot of id id
   @param id id of the pilot to talk to
   @param message string to say to the player
   @return nil

broadcast( string message )
   @desc makes the pilot broadcast a message to everyone in the system
   @param message string to say to everyone in the system
   @return nil



   L O O T

setcredits( number creds )
   @desc sets the pilot's credits to creds, only works during create
   @param creds pilot's credits
   @return nil

setcargo( string cargo, number quantity )
   @desc gives the pilot quantity of cargo, only works during create
   @param cargo name of cargo to give the pilot
   @param quantity amount to give the pilot
   @return nil

shipprice()
   @desc gets the price of the pilot's ship
   @return the price of the pilot's ship



   M I S C

rng( number low, number high )
   @desc returns a random number between low and high
   @param low minimum to return
   @param high maximum to return
   @return random number between low and high
